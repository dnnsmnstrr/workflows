<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.customct.AnyBar</string>
	<key>connections</key>
	<dict>
		<key>0A14EA0C-8ED1-45C5-80F7-EF5184C37119</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>7A829045-C79D-4D35-9DD6-C279B2241C06</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>3E97DC8F-A370-454D-949D-E4330F459AC6</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>0FF09301-153E-4DFF-8099-8A820DF0C8EF</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>42245363-BEB4-43FF-BF07-4EBE65E231A4</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>7C121B2D-5771-4A5A-9F73-BC880BE2E4A7</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>62F16E06-C63B-4499-AA35-4FB8E58D90F9</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>656B63D6-E0FF-41EE-AC68-8DAF0FBA036E</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>656B63D6-E0FF-41EE-AC68-8DAF0FBA036E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>2FBA4E10-6EF6-41D5-A415-68D7DAE5B14D</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>7A829045-C79D-4D35-9DD6-C279B2241C06</key>
		<array>
		</array>
		<key>7C121B2D-5771-4A5A-9F73-BC880BE2E4A7</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>2FBA4E10-6EF6-41D5-A415-68D7DAE5B14D</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>89807341-AEB7-4232-A323-4C19F67C0958</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>FA18CE87-4064-4A2E-95EE-D6132FEB41E8</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>999ACBC0-4B7D-4A2E-952F-FF7568D65524</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>1B282587-FB16-40F1-B540-D11B024AE149</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>72CED92D-60E2-427F-BF50-FC9DA516FAA9</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>E7B3FBD8-A05D-47BB-8EE7-3EA89BAE8382</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>FA18CE87-4064-4A2E-95EE-D6132FEB41E8</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>E8B4CF9F-BD9C-4A86-9DC2-A5B45DBB48B1</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>999ACBC0-4B7D-4A2E-952F-FF7568D65524</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Richard Guay</string>
	<key>description</key>
	<string>A workflow to interact with Any Bar</string>
	<key>disabled</key>
	<true/>
	<key>name</key>
	<string>AnyBar</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>triggerid</key>
				<string>SetGraphic</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.external</string>
			<key>uid</key>
			<string>0A14EA0C-8ED1-45C5-80F7-EF5184C37119</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>query="{query}";

a=("${(@s/|/)query}")
color=`echo -n $a[1] | tr -d '[[:space:]]'`;
port=`echo -n $a[2] | tr -d '[[:space:]]'`;

if [[ -z $port ]]; then
	echo -n $color | nc -4u -w0 localhost 1738;
else
	echo -n $color | nc -4u -w0 localhost $port;
fi
</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>5</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>7A829045-C79D-4D35-9DD6-C279B2241C06</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>'{query}', {allvars}</string>
				<key>cleardebuggertext</key>
				<false/>
				<key>processoutputs</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.debug</string>
			<key>uid</key>
			<string>1B282587-FB16-40F1-B540-D11B024AE149</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>
#########################
# Contants.
#########################
VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

if [ ! -d "$(getDataDir)" ]; then
   mkdir -p "$(getDataDir)";
   echo -n "1738" &gt; "$(getDataDir)/port.txt";
fi

query="{query}";

port=`cat "$(getDataDir)/port.txt"`;

echo -n "$query|$port";</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>999ACBC0-4B7D-4A2E-952F-FF7568D65524</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>set theQuery to "{query}"

tell application "Alfred 4" to run trigger "SetGraphic" in workflow "xyz.muensterer.anybar" with argument theQuery</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>6</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>72CED92D-60E2-427F-BF50-FC9DA516FAA9</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>anybar:setgraphic</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>2</integer>
				<key>runningsubtext</key>
				<string>Loading Graphics...</string>
				<key>script</key>
				<string>VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

RESULTS=()

################################################################################
# Adds a result to the result array
#
# $1 uid
# $2 arg
# $3 title
# $4 subtitle
# $5 icon
# $6 valid
# $7 autocomplete
###############################################################################
addResult() {
  RESULT="&lt;item uid='$(xmlEncode "$1")' arg='$(xmlEncode "$2")' valid='$6' autocomplete='$7'&gt;&lt;title&gt;$(xmlEncode "$3")&lt;/title&gt;&lt;subtitle&gt;$(xmlEncode "$4")&lt;/subtitle&gt;&lt;icon&gt;$(xmlEncode "$5")&lt;/icon&gt;&lt;/item&gt;"
  RESULTS+=("$RESULT")
}

addResultConditional() {
	qu=`echo -n $1 | tr '[:upper:]' '[:lower:]'`;
	ti=`echo -n $4 | tr '[:upper:]' '[:lower:]'`;
	if [[ $ti == *$qu* ]]; then
		addResult "$2" "$3" "$4" "$5" "$6" "$7" "$8";
	fi
}

###############################################################################
# Prints the feedback xml to stdout
###############################################################################
getXMLResults() {
  echo -n "&lt;?xml version='1.0'?&gt;&lt;items&gt;"

#  if [ "${#string[@]}" = "0" ]; then
#    echo -n "&lt;item uid='oftask' arg='-' valid='no'&gt;&lt;title&gt;No results found&lt;/title&gt;&lt;subtitle&gt;Please try another search term&lt;/subtitle&gt;&lt;icon&gt;&lt;/icon&gt;&lt;/item&gt; "
#  fi

  for R in ${RESULTS[*]}; do
    echo -n "$R "
  done

  echo -n "&lt;/items&gt; "
}

###############################################################################
# Escapes XML special characters with their entities
###############################################################################
xmlEncode() {
  echo -n "$1" | sed 's/\n/ /' | sed 's/&amp;/&amp;amp;/' | sed 's/&gt;/&amp;gt;/' | sed 's/&lt;/&amp;lt;/' | sed "s/\'/&amp;apos;/" | sed 's/\"/&amp;quot;/'
}

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo  -n "${NVPREFS}${BUNDLEID}"
}

###############################################################################
# Get the workflow cache dri
###############################################################################
getCacheDir() {
  local BUNDLEID=$(getBundleId)
  echo -n "${VPREFS}${BUNDLEID}"
}

###############################################################################
# Save key=value to the workflow properties
#
# $1 key
# $2 value
# $3 non-volatile 0/1
# $4 filename (optional, filename will be "settings" if not specified)
###############################################################################
setPref() {
  local BUNDLEID=$(getBundleId)
  if [ "$3" = "0" ]; then
    local PREFDIR="${VPREFS}${BUNDLEID}"
  else
    local PREFDIR="${NVPREFS}${BUNDLEID}"
  fi

  if [ ! -d "$PREFDIR" ]; then
    mkdir -p "$PREFDIR"
  fi

  if [ -z "$4" ]; then
    local PREFFILE="${PREFDIR}/settings"
  else
    local PREFFILE="${PREFDIR}/$4"
  fi

  if [ ! -f "$PREFFILE" ]; then
    touch "$PREFFILE"
  fi

  local KEY_EXISTS=$(grep -c "$1=" "$PREFFILE")
  if [ "$KEY_EXISTS" = "0" ]; then
    echo -n "$1=$2" &gt;&gt; "$PREFFILE"
  else
    sed -i "" s/"$1=.*"/"$1=$2"/ "$PREFFILE"
  fi
}

###############################################################################
# Read a value for a given key from the workflow preferences
#
# $1 key
# $2 non-volatile 0/1
# $3 filename (optional, filename will be "settings" if not specified)
###############################################################################
getPref() {
  local BUNDLEID=$(getBundleId)
  if [ "$2" = "0" ]; then
    local PREFDIR="${VPREFS}${BUNDLEID}"
  else
    local PREFDIR="${NVPREFS}${BUNDLEID}"
  fi

  if [ ! -d "$PREFDIR" ]; then
    return
  fi

  if [ -z "$3" ]; then
    local PREFFILE="${PREFDIR}/settings"
  else
    local PREFFILE="${PREFDIR}/$3"
  fi

  if [ ! -f "$PREFFILE" ]; then
    return
  fi

  local VALUE=$(sed "/^\#/d" "$PREFFILE" | grep "$1"  | tail -n 1 | cut -d "=" -f2-)
  echo -n "$VALUE"
}

query="{query}"


addResultConditional "$query" 'abwhite' "white" 'White Circle' 'AnyBar Workflow' 'icon.png' 'yes' '';

addResultConditional "$query" 'abblue' "blue" 'Blue Circle' 'AnyBar Workflow' 'icon.png' 'yes' '';

addResultConditional "$query" 'abred' "red" 'Red Circle' 'AnyBar Workflow' 'icon.png' 'yes' '';

addResultConditional "$query" 'aborange' "orange" 'Orange Circle' 'AnyBar Workflow' 'icon.png' 'yes' '';

addResultConditional "$query" 'abyellow' "yellow" 'Yellow Circle' 'AnyBar Workflow' 'icon.png' 'yes' '';

addResultConditional "$query" 'abgreen' "green" 'Green Circle' 'AnyBar Workflow' 'icon.png' 'yes' '';

addResultConditional "$query" 'abcyan' "cyan" 'Cyan Circle' 'AnyBar Workflow' 'icon.png' 'yes' '';

addResultConditional "$query" 'abpurple' "purple" 'Purple Circle' 'AnyBar Workflow' 'icon.png' 'yes' '';

addResultConditional "$query" 'abblack' "black" 'Black Circle' 'AnyBar Workflow' 'icon.png' 'yes' '';

addResultConditional "$query" 'abquestion' "question" 'Question' 'AnyBar Workflow' 'icon.png' 'yes' '';

addResultConditional "$query" 'abexclamation' "exclamation" 'Exclamation' 'AnyBar Workflow' 'icon.png' 'yes' '';

for filename in ~/.AnyBar/*.png; do
	name="$(basename "$filename" .png)";
	name=`echo -n $name | tr '\_' ' '`;
    addResultConditional "$query" "ab$name" "$name" "$name" 'AnyBar Workflow' 'icon.png' 'yes' '';
done

res="$(getXMLResults)";

if [[ $res == *"&lt;items&gt;&lt;/items&gt;"* ]]; then
	addResult '999' ' ' 'Sorry, no match. Try Again!' 'AnyBar Workflow' 'icon.png' 'no' '';
fi

echo -n "$(getXMLResults)";


</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>AnyBar Workflow</string>
				<key>title</key>
				<string>Set the Graphic</string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>E8B4CF9F-BD9C-4A86-9DC2-A5B45DBB48B1</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>triggerid</key>
				<string>Launch</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.external</string>
			<key>uid</key>
			<string>89807341-AEB7-4232-A323-4C19F67C0958</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>
#########################
# Contants.
#########################
VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

if [ ! -d "$(getDataDir)" ]; then
   mkdir -p "$(getDataDir)";
   echo -n "1738" &gt; "$(getDataDir)/port.txt";
fi

query="{query}"

if [[ -z $query ]]; then
	open -n ~/Applications/AnyBar.app
	echo -n "1738" &gt; "$(getDataDir)/port.txt";
else
	ANYBAR_PORT=$query open -n ~/Applications/AnyBar.app
	echo -n "$query" &gt; "$(getDataDir)/port.txt";
fi
</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>5</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>FA18CE87-4064-4A2E-95EE-D6132FEB41E8</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>keyword</key>
				<string>anybar:launch</string>
				<key>subtext</key>
				<string>AnyBar Workflow</string>
				<key>text</key>
				<string>Launch AnyBar with Port</string>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>E7B3FBD8-A05D-47BB-8EE7-3EA89BAE8382</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>query="{query}"

if [[ -d "~/.AnyBar" ]]; then
	mv "$query" ~/.AnyBar;
else
	mkdir ~/.AnyBar;
	mv "$query" ~/.AnyBar;
fi
</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>0FF09301-153E-4DFF-8099-8A820DF0C8EF</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>acceptsmulti</key>
				<false/>
				<key>filetypes</key>
				<array>
					<string>public.png</string>
				</array>
				<key>name</key>
				<string>Move to Anybar</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.action</string>
			<key>uid</key>
			<string>3E97DC8F-A370-454D-949D-E4330F459AC6</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>anybar:setport</string>
				<key>subtext</key>
				<string>AnyBar Workflow</string>
				<key>text</key>
				<string>Set the Port to send commands</string>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>62F16E06-C63B-4499-AA35-4FB8E58D90F9</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>
#########################
# Contants.
#########################
VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

if [ ! -d "$(getDataDir)" ]; then
   mkdir -p "$(getDataDir)";
   echo -n "1738" &gt; "$(getDataDir)/port.txt";
fi

query="{query}";

echo -n "$query" &gt; "$(getDataDir)/port.txt";

echo "Set to port: {query}.";</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>656B63D6-E0FF-41EE-AC68-8DAF0FBA036E</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>
#########################
# Contants.
#########################
VPREFS="${HOME}/Library/Caches/com.runningwithcrayons.Alfred-2/Workflow Data/"
NVPREFS="${HOME}/Library/Application Support/Alfred 2/Workflow Data/"

###############################################################################
# Read the bundleid from the workflow's info.plist
###############################################################################
getBundleId() {
  /usr/libexec/PlistBuddy  -c "Print :bundleid" "info.plist"
}

###############################################################################
# Get the workflow data dir
###############################################################################
getDataDir() {
  local BUNDLEID=$(getBundleId)
  echo "${NVPREFS}${BUNDLEID}"
}

if [ ! -d "$(getDataDir)" ]; then
   mkdir -p "$(getDataDir)";
   echo -n "1738" &gt; "$(getDataDir)/port.txt";
fi

if [[ ! -d "${HOME}/.AnyBar" ]]; then
	mkdir -p "${HOME}/.AnyBar"
fi

cp -f ./AnyBar/*.png "${HOME}/.AnyBar"

echo -n "Graphics Copied!  ";
</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>7C121B2D-5771-4A5A-9F73-BC880BE2E4A7</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<true/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>AnyBar Workflow</string>
				<key>title</key>
				<string>{query}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>2FBA4E10-6EF6-41D5-A415-68D7DAE5B14D</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>anybar:setup</string>
				<key>subtext</key>
				<string>AnyBar Workflow</string>
				<key>text</key>
				<string>Setup Anybar by creating and moving default graphics.</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>42245363-BEB4-43FF-BF07-4EBE65E231A4</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>This workflow is created by Richard Guay. Visit http://customct.com/alfred-2-workflows for even more fun!

This workflow requires the anybar application to be install. The easiest way to install is by home-brew cask:

brew cask install anybar

If you do not have home-brew cask installed, follow the instructions here: [HomeBrew Cask](http://caskroom.io/). If you do not have HomeBrew installed, follow the instructions here: [HomeBrew](http://brew.sh/). Then execute the above line.

Once installed, you can use the features of this workflow:

anybar:launch - Launches anybar with optional port number.

anybar:setgraphic - Set the graphic for the anybar application. It will give a list of usable graphics. Start typing and the list will be narrowed down to the ones that match. Select the one and the last launched Anybar will be changed to that graphic.

anybar:setport - This allows you to set the port number of the AnyBar app.

anybar:setup - This copies the graphics I created to the ~/.AnyBar directory.

There is a file action, Copy to Anybar,  that will copy a png graphic to the ~/.AnyBar directory so that it can be used with the program.

There are two External Triggers: SetGraphic and Launch. The SetGraphic external trigger expects a string with the name of the graphic, a '|', and a port number. The Launch external trigger expects a UDP port number to launch the AnyBar program on.</string>
	<key>uidata</key>
	<dict>
		<key>0A14EA0C-8ED1-45C5-80F7-EF5184C37119</key>
		<dict>
			<key>xpos</key>
			<integer>100</integer>
			<key>ypos</key>
			<real>10.0</real>
		</dict>
		<key>0FF09301-153E-4DFF-8099-8A820DF0C8EF</key>
		<dict>
			<key>xpos</key>
			<integer>500</integer>
			<key>ypos</key>
			<real>370.0</real>
		</dict>
		<key>1B282587-FB16-40F1-B540-D11B024AE149</key>
		<dict>
			<key>xpos</key>
			<integer>680</integer>
			<key>ypos</key>
			<integer>75</integer>
		</dict>
		<key>2FBA4E10-6EF6-41D5-A415-68D7DAE5B14D</key>
		<dict>
			<key>xpos</key>
			<integer>700</integer>
			<key>ypos</key>
			<real>610.0</real>
		</dict>
		<key>3E97DC8F-A370-454D-949D-E4330F459AC6</key>
		<dict>
			<key>xpos</key>
			<integer>100</integer>
			<key>ypos</key>
			<real>370.0</real>
		</dict>
		<key>42245363-BEB4-43FF-BF07-4EBE65E231A4</key>
		<dict>
			<key>xpos</key>
			<integer>300</integer>
			<key>ypos</key>
			<real>610.0</real>
		</dict>
		<key>62F16E06-C63B-4499-AA35-4FB8E58D90F9</key>
		<dict>
			<key>xpos</key>
			<integer>300</integer>
			<key>ypos</key>
			<real>490.0</real>
		</dict>
		<key>656B63D6-E0FF-41EE-AC68-8DAF0FBA036E</key>
		<dict>
			<key>xpos</key>
			<integer>500</integer>
			<key>ypos</key>
			<real>490.0</real>
		</dict>
		<key>72CED92D-60E2-427F-BF50-FC9DA516FAA9</key>
		<dict>
			<key>xpos</key>
			<integer>700</integer>
			<key>ypos</key>
			<real>130.0</real>
		</dict>
		<key>7A829045-C79D-4D35-9DD6-C279B2241C06</key>
		<dict>
			<key>xpos</key>
			<integer>500</integer>
			<key>ypos</key>
			<real>10.0</real>
		</dict>
		<key>7C121B2D-5771-4A5A-9F73-BC880BE2E4A7</key>
		<dict>
			<key>xpos</key>
			<integer>500</integer>
			<key>ypos</key>
			<real>610.0</real>
		</dict>
		<key>89807341-AEB7-4232-A323-4C19F67C0958</key>
		<dict>
			<key>xpos</key>
			<integer>100</integer>
			<key>ypos</key>
			<real>190.0</real>
		</dict>
		<key>999ACBC0-4B7D-4A2E-952F-FF7568D65524</key>
		<dict>
			<key>xpos</key>
			<integer>500</integer>
			<key>ypos</key>
			<real>130.0</real>
		</dict>
		<key>E7B3FBD8-A05D-47BB-8EE7-3EA89BAE8382</key>
		<dict>
			<key>xpos</key>
			<integer>300</integer>
			<key>ypos</key>
			<real>260.0</real>
		</dict>
		<key>E8B4CF9F-BD9C-4A86-9DC2-A5B45DBB48B1</key>
		<dict>
			<key>xpos</key>
			<integer>300</integer>
			<key>ypos</key>
			<real>130.0</real>
		</dict>
		<key>FA18CE87-4064-4A2E-95EE-D6132FEB41E8</key>
		<dict>
			<key>xpos</key>
			<integer>500</integer>
			<key>ypos</key>
			<real>250.0</real>
		</dict>
	</dict>
	<key>webaddress</key>
	<string>http://customct.com/alfred-2-workflows</string>
</dict>
</plist>
