#!/usr/bin/python

import alfred
import json
import os
import subprocess
import sys
import urllib
import uuid


def get_url(alfreditem):
  url = alfreditem.get('quicklookurl', alfreditem.get('arg', ''))
  if (url.startswith('http://') or url.startswith('https://')):
    return url
  elif url.endswith('.html'):
    if url.startswith('~'):
      return os.path.abspath(os.path.expanduser(url))
    elif url.startswith('/'):
      return url
    else:
      basedir = os.environ.get('basedir', alfred.WORKFLOW_DIR)
      return os.path.abspath(os.path.join(basedir, url))
  else:
    return ''


if __name__ == '__main__':
  '''
  Environment variables to be set by callers:

  Optional:
    - basedir: relative html paths will be resolved wrt this
               defaults to workflow dir

  Mandatory:
    - arg: the argument is passed to the script filter
  '''
  alfreditems = json.load(sys.stdin)

  urls = [get_url(item) for item in alfreditems['items']]

  specfilepath = '/tmp/%s' % str(uuid.uuid4())
  with open(specfilepath, 'w') as tmpfile: json.dump(urls, tmpfile)

  cssfilepath = '/tmp/%s.css' % str(uuid.uuid4())
  with open(cssfilepath, 'w') as tmpfile: tmpfile.write(alfred.theme_css())

  bkgColor = alfred.theme()['window.color']
  bkgColorWithoutAlpha = bkgColor[:-2]
  subprocess.call([
    'open', '-g',
    'alfred-gif-browser://update?%s' % urllib.urlencode({
      'specFile': specfilepath,
      'cssFile': cssfilepath,
      'bkgColor': bkgColorWithoutAlpha
    })
  ])

  print(json.dumps(alfreditems, indent=2))
  sys.stdout.flush()
